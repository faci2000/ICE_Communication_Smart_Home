//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `smartHome.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace smartHome
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Serializable]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class IndexOutOfRangeException : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public string ice_message_;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        private void _initDM()
        {
            this.ice_message_ = "";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public IndexOutOfRangeException()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public IndexOutOfRangeException(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public IndexOutOfRangeException(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
            this.ice_message_ = info.GetString("ice_message_");
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        private void _initDM(string message)
        {
            this.ice_message_ = message;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public IndexOutOfRangeException(string message)
        {
            _initDM(message);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public IndexOutOfRangeException(string message, global::System.Exception ex) : base(ex)
        {
            _initDM(message);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override string ice_id()
        {
            return "::smartHome::IndexOutOfRangeException";
        }

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::smartHome::IndexOutOfRangeException");
            global::IceInternal.HashUtil.hashAdd(ref h_, ice_message_);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override bool Equals(object other)
        {
            if(other == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            IndexOutOfRangeException o = other as IndexOutOfRangeException;
            if(o == null)
            {
                return false;
            }
            if(this.ice_message_ == null)
            {
                if(o.ice_message_ != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.ice_message_.Equals(o.ice_message_))
                {
                    return false;
                }
            }
            return true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override void GetObjectData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context)
        {
            info.AddValue("ice_message_", this.ice_message_ == null ? "" : this.ice_message_);

            base.GetObjectData(info, context);
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static bool operator==(IndexOutOfRangeException lhs, IndexOutOfRangeException rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static bool operator!=(IndexOutOfRangeException lhs, IndexOutOfRangeException rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::smartHome::IndexOutOfRangeException", -1, true);
            ostr_.writeString(ice_message_);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            ice_message_ = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Serializable]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class OperationNotSupportedException : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public string ice_message_;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        private void _initDM()
        {
            this.ice_message_ = "";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public OperationNotSupportedException()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public OperationNotSupportedException(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public OperationNotSupportedException(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
            this.ice_message_ = info.GetString("ice_message_");
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        private void _initDM(string message)
        {
            this.ice_message_ = message;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public OperationNotSupportedException(string message)
        {
            _initDM(message);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public OperationNotSupportedException(string message, global::System.Exception ex) : base(ex)
        {
            _initDM(message);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override string ice_id()
        {
            return "::smartHome::OperationNotSupportedException";
        }

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::smartHome::OperationNotSupportedException");
            global::IceInternal.HashUtil.hashAdd(ref h_, ice_message_);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override bool Equals(object other)
        {
            if(other == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            OperationNotSupportedException o = other as OperationNotSupportedException;
            if(o == null)
            {
                return false;
            }
            if(this.ice_message_ == null)
            {
                if(o.ice_message_ != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.ice_message_.Equals(o.ice_message_))
                {
                    return false;
                }
            }
            return true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override void GetObjectData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context)
        {
            info.AddValue("ice_message_", this.ice_message_ == null ? "" : this.ice_message_);

            base.GetObjectData(info, context);
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static bool operator==(OperationNotSupportedException lhs, OperationNotSupportedException rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static bool operator!=(OperationNotSupportedException lhs, OperationNotSupportedException rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::smartHome::OperationNotSupportedException", -1, true);
            ostr_.writeString(ice_message_);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            ice_message_ = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Serializable]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class DeviceNotExistsException : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public string ice_message_;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        private void _initDM()
        {
            this.ice_message_ = "";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public DeviceNotExistsException()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public DeviceNotExistsException(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public DeviceNotExistsException(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
            this.ice_message_ = info.GetString("ice_message_");
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        private void _initDM(string message)
        {
            this.ice_message_ = message;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public DeviceNotExistsException(string message)
        {
            _initDM(message);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public DeviceNotExistsException(string message, global::System.Exception ex) : base(ex)
        {
            _initDM(message);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override string ice_id()
        {
            return "::smartHome::DeviceNotExistsException";
        }

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::smartHome::DeviceNotExistsException");
            global::IceInternal.HashUtil.hashAdd(ref h_, ice_message_);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override bool Equals(object other)
        {
            if(other == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            DeviceNotExistsException o = other as DeviceNotExistsException;
            if(o == null)
            {
                return false;
            }
            if(this.ice_message_ == null)
            {
                if(o.ice_message_ != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.ice_message_.Equals(o.ice_message_))
                {
                    return false;
                }
            }
            return true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override void GetObjectData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context)
        {
            info.AddValue("ice_message_", this.ice_message_ == null ? "" : this.ice_message_);

            base.GetObjectData(info, context);
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static bool operator==(DeviceNotExistsException lhs, DeviceNotExistsException rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static bool operator!=(DeviceNotExistsException lhs, DeviceNotExistsException rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::smartHome::DeviceNotExistsException", -1, true);
            ostr_.writeString(ice_message_);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            ice_message_ = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public enum DeviceType
    {
        RGBWxLEDxLIGHT,
        MONOCHROMATICxLEDxLIGHT,
        IPV6xNETWORKxMONITOR,
        NATxNETWORKxMONITOR
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public sealed class DeviceTypeHelper
    {
        public static void write(global::Ice.OutputStream ostr, DeviceType v)
        {
            ostr.writeEnum((int)v, 3);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static DeviceType read(global::Ice.InputStream istr)
        {
            DeviceType v;
            v = (DeviceType)istr.readEnum(3);
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class SmartHomeDevice : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public string name;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public DeviceType deviceType;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public string serialNumber;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public SmartHomeDevice()
        {
            this.name = "";
            this.serialNumber = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public SmartHomeDevice(string name, DeviceType deviceType, string serialNumber)
        {
            this.name = name;
            this.deviceType = deviceType;
            this.serialNumber = serialNumber;
            ice_initialize();
        }

        #endregion

        private const string _id = "::smartHome::SmartHomeDevice";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeString(name);
            ostr_.writeEnum((int)deviceType, 3);
            ostr_.writeString(serialNumber);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            name = istr_.readString();
            deviceType = (DeviceType)istr_.readEnum(3);
            serialNumber = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface ISmartHomeDevice : global::Ice.Object, ISmartHomeDeviceOperations_
    {
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class IpAddress : global::System.ICloneable
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public string ip;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public string mask;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public IpAddress()
        {
            this.ip = "";
            this.mask = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public IpAddress(string ip, string mask)
        {
            this.ip = ip;
            this.mask = mask;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::smartHome::IpAddress");
            global::IceInternal.HashUtil.hashAdd(ref h_, ip);
            global::IceInternal.HashUtil.hashAdd(ref h_, mask);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override bool Equals(object other)
        {
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            if(other == null)
            {
                return false;
            }
            if(GetType() != other.GetType())
            {
                return false;
            }
            IpAddress o = (IpAddress)other;
            if(this.ip == null)
            {
                if(o.ip != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.ip.Equals(o.ip))
                {
                    return false;
                }
            }
            if(this.mask == null)
            {
                if(o.mask != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.mask.Equals(o.mask))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static bool operator==(IpAddress lhs, IpAddress rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static bool operator!=(IpAddress lhs, IpAddress rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeString(this.ip);
            ostr.writeString(this.mask);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.ip = istr.readString();
            this.mask = istr.readString();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static void ice_write(global::Ice.OutputStream ostr, IpAddress v)
        {
            if(v == null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static IpAddress ice_read(global::Ice.InputStream istr)
        {
            var v = new IpAddress();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly IpAddress _nullMarshalValue = new IpAddress();

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class Ipv6Address : global::System.ICloneable
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public string ip;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public short prefix;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public Ipv6Address()
        {
            this.ip = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public Ipv6Address(string ip, short prefix)
        {
            this.ip = ip;
            this.prefix = prefix;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::smartHome::Ipv6Address");
            global::IceInternal.HashUtil.hashAdd(ref h_, ip);
            global::IceInternal.HashUtil.hashAdd(ref h_, prefix);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override bool Equals(object other)
        {
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            if(other == null)
            {
                return false;
            }
            if(GetType() != other.GetType())
            {
                return false;
            }
            Ipv6Address o = (Ipv6Address)other;
            if(this.ip == null)
            {
                if(o.ip != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.ip.Equals(o.ip))
                {
                    return false;
                }
            }
            if(!this.prefix.Equals(o.prefix))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static bool operator==(Ipv6Address lhs, Ipv6Address rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static bool operator!=(Ipv6Address lhs, Ipv6Address rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeString(this.ip);
            ostr.writeShort(this.prefix);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.ip = istr.readString();
            this.prefix = istr.readShort();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static void ice_write(global::Ice.OutputStream ostr, Ipv6Address v)
        {
            if(v == null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static Ipv6Address ice_read(global::Ice.InputStream istr)
        {
            var v = new Ipv6Address();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly Ipv6Address _nullMarshalValue = new Ipv6Address();

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public enum NetworkStatus
    {
        ON,
        OFF,
        OUTxOFxRANGE
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public sealed class NetworkStatusHelper
    {
        public static void write(global::Ice.OutputStream ostr, NetworkStatus v)
        {
            ostr.writeEnum((int)v, 2);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static NetworkStatus read(global::Ice.InputStream istr)
        {
            NetworkStatus v;
            v = (NetworkStatus)istr.readEnum(2);
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface INetworkMonitor : global::Ice.Object, INetworkMonitorOperations_, ISmartHomeDevice
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class NetworkMonitor : SmartHomeDevice
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public NetworkStatus status;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public short connectedDevicesNo;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public short networkBandwidth;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public NetworkMonitor() : base()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public NetworkMonitor(string name, DeviceType deviceType, string serialNumber, NetworkStatus status, short connectedDevicesNo, short networkBandwidth) : base(name, deviceType, serialNumber)
        {
            this.status = status;
            this.connectedDevicesNo = connectedDevicesNo;
            this.networkBandwidth = networkBandwidth;
            ice_initialize();
        }

        #endregion

        private const string _id = "::smartHome::NetworkMonitor";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeEnum((int)status, 2);
            ostr_.writeShort(connectedDevicesNo);
            ostr_.writeShort(networkBandwidth);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            status = (NetworkStatus)istr_.readEnum(2);
            connectedDevicesNo = istr_.readShort();
            networkBandwidth = istr_.readShort();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface INatNetworkMonitor : global::Ice.Object, INatNetworkMonitorOperations_, INetworkMonitor
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class NatNetworkMonitor : NetworkMonitor
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public global::System.Collections.Generic.Dictionary<IpAddress, IpAddress> natTable;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public IpAddress[] devices;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public NatNetworkMonitor() : base()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public NatNetworkMonitor(string name, DeviceType deviceType, string serialNumber, NetworkStatus status, short connectedDevicesNo, short networkBandwidth, global::System.Collections.Generic.Dictionary<IpAddress, IpAddress> natTable, IpAddress[] devices) : base(name, deviceType, serialNumber, status, connectedDevicesNo, networkBandwidth)
        {
            this.natTable = natTable;
            this.devices = devices;
            ice_initialize();
        }

        #endregion

        private const string _id = "::smartHome::NatNetworkMonitor";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            NatTableHelper.write(ostr_, natTable);
            IpAddressesHelper.write(ostr_, devices);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            natTable = NatTableHelper.read(istr_);
            devices = IpAddressesHelper.read(istr_);
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class IPv6NetworkMonitor : NetworkMonitor
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public Ipv6Address[] devices;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public IPv6NetworkMonitor() : base()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public IPv6NetworkMonitor(string name, DeviceType deviceType, string serialNumber, NetworkStatus status, short connectedDevicesNo, short networkBandwidth, Ipv6Address[] devices) : base(name, deviceType, serialNumber, status, connectedDevicesNo, networkBandwidth)
        {
            this.devices = devices;
            ice_initialize();
        }

        #endregion

        private const string _id = "::smartHome::IPv6NetworkMonitor";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            Ipv6AddressesHelper.write(ostr_, devices);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            devices = Ipv6AddressesHelper.read(istr_);
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public enum LightMode
    {
        STROBE,
        BLINK,
        FADE,
        SOLID
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public sealed class LightModeHelper
    {
        public static void write(global::Ice.OutputStream ostr, LightMode v)
        {
            ostr.writeEnum((int)v, 3);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static LightMode read(global::Ice.InputStream istr)
        {
            LightMode v;
            v = (LightMode)istr.readEnum(3);
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public enum Color
    {
        RED,
        BLUE,
        GREEN,
        WHITE
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public sealed class ColorHelper
    {
        public static void write(global::Ice.OutputStream ostr, Color v)
        {
            ostr.writeEnum((int)v, 3);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static Color read(global::Ice.InputStream istr)
        {
            Color v;
            v = (Color)istr.readEnum(3);
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface ILedLight : global::Ice.Object, ILedLightOperations_, ISmartHomeDevice
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class LedLight : SmartHomeDevice
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public bool isOn;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public short brightness;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public LightMode lightMode;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public LedLight() : base()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public LedLight(string name, DeviceType deviceType, string serialNumber, bool isOn, short brightness, LightMode lightMode) : base(name, deviceType, serialNumber)
        {
            this.isOn = isOn;
            this.brightness = brightness;
            this.lightMode = lightMode;
            ice_initialize();
        }

        #endregion

        private const string _id = "::smartHome::LedLight";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeBool(isOn);
            ostr_.writeShort(brightness);
            ostr_.writeEnum((int)lightMode, 3);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            isOn = istr_.readBool();
            brightness = istr_.readShort();
            lightMode = (LightMode)istr_.readEnum(3);
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface IRgbwLight : global::Ice.Object, IRgbwLightOperations_, ILedLight
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class RgbwLight : LedLight
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public global::System.Collections.Generic.Dictionary<Color, short> rgbwPallet;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public RgbwLight() : base()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public RgbwLight(string name, DeviceType deviceType, string serialNumber, bool isOn, short brightness, LightMode lightMode, global::System.Collections.Generic.Dictionary<Color, short> rgbwPallet) : base(name, deviceType, serialNumber, isOn, brightness, lightMode)
        {
            this.rgbwPallet = rgbwPallet;
            ice_initialize();
        }

        #endregion

        private const string _id = "::smartHome::RgbwLight";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            RgbwPalletHelper.write(ostr_, rgbwPallet);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            rgbwPallet = RgbwPalletHelper.read(istr_);
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class MonoChromaticLedLight : LedLight
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public Color mainColor;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public MonoChromaticLedLight() : base()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public MonoChromaticLedLight(string name, DeviceType deviceType, string serialNumber, bool isOn, short brightness, LightMode lightMode, Color mainColor) : base(name, deviceType, serialNumber, isOn, brightness, lightMode)
        {
            this.mainColor = mainColor;
            ice_initialize();
        }

        #endregion

        private const string _id = "::smartHome::MonoChromaticLedLight";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeEnum((int)mainColor, 3);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            mainColor = (Color)istr_.readEnum(3);
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }
}

namespace smartHome
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_ISmartHomeDevice_getDeviceInfo(string ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_INetworkMonitor_changeNetworkStatus(NetworkStatus ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_INetworkMonitor_registerNewIpv6Device(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_INetworkMonitor_registerNewIpv4Device(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_INetworkMonitor_removeIpv6Device(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_INetworkMonitor_removeIpv4Device(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_INatNetworkMonitor_registerNewIpTranslation(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_INatNetworkMonitor_removeIpTranslation(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_ILedLight_changeBrightness(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_ILedLight_toggleLight(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_ILedLight_changeLightMode(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_IRgbwLight_changeColor(bool ret);
}

namespace smartHome
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface ISmartHomeDevicePrx : global::Ice.ObjectPrx
    {
        string getDeviceInfo(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<string> getDeviceInfoAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_ISmartHomeDevice_getDeviceInfo> begin_getDeviceInfo(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getDeviceInfo(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getDeviceInfo(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        string end_getDeviceInfo(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface INetworkMonitorPrx : ISmartHomeDevicePrx
    {
        NetworkStatus changeNetworkStatus(NetworkStatus newNetworkStatus, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<NetworkStatus> changeNetworkStatusAsync(NetworkStatus newNetworkStatus, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_INetworkMonitor_changeNetworkStatus> begin_changeNetworkStatus(NetworkStatus newNetworkStatus, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_changeNetworkStatus(NetworkStatus newNetworkStatus, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_changeNetworkStatus(NetworkStatus newNetworkStatus, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        NetworkStatus end_changeNetworkStatus(global::Ice.AsyncResult asyncResult);

        bool registerNewIpv6Device(Ipv6Address device, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> registerNewIpv6DeviceAsync(Ipv6Address device, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_INetworkMonitor_registerNewIpv6Device> begin_registerNewIpv6Device(Ipv6Address device, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_registerNewIpv6Device(Ipv6Address device, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_registerNewIpv6Device(Ipv6Address device, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_registerNewIpv6Device(global::Ice.AsyncResult asyncResult);

        bool registerNewIpv4Device(IpAddress device, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> registerNewIpv4DeviceAsync(IpAddress device, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_INetworkMonitor_registerNewIpv4Device> begin_registerNewIpv4Device(IpAddress device, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_registerNewIpv4Device(IpAddress device, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_registerNewIpv4Device(IpAddress device, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_registerNewIpv4Device(global::Ice.AsyncResult asyncResult);

        bool removeIpv6Device(Ipv6Address device, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> removeIpv6DeviceAsync(Ipv6Address device, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_INetworkMonitor_removeIpv6Device> begin_removeIpv6Device(Ipv6Address device, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_removeIpv6Device(Ipv6Address device, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_removeIpv6Device(Ipv6Address device, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_removeIpv6Device(global::Ice.AsyncResult asyncResult);

        bool removeIpv4Device(IpAddress device, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> removeIpv4DeviceAsync(IpAddress device, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_INetworkMonitor_removeIpv4Device> begin_removeIpv4Device(IpAddress device, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_removeIpv4Device(IpAddress device, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_removeIpv4Device(IpAddress device, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_removeIpv4Device(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface INatNetworkMonitorPrx : INetworkMonitorPrx
    {
        bool registerNewIpTranslation(IpAddress inside, IpAddress outside, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> registerNewIpTranslationAsync(IpAddress inside, IpAddress outside, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_INatNetworkMonitor_registerNewIpTranslation> begin_registerNewIpTranslation(IpAddress inside, IpAddress outside, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_registerNewIpTranslation(IpAddress inside, IpAddress outside, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_registerNewIpTranslation(IpAddress inside, IpAddress outside, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_registerNewIpTranslation(global::Ice.AsyncResult asyncResult);

        bool removeIpTranslation(IpAddress inside, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> removeIpTranslationAsync(IpAddress inside, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_INatNetworkMonitor_removeIpTranslation> begin_removeIpTranslation(IpAddress inside, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_removeIpTranslation(IpAddress inside, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_removeIpTranslation(IpAddress inside, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_removeIpTranslation(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface ILedLightPrx : ISmartHomeDevicePrx
    {
        bool changeBrightness(short newBrightness, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> changeBrightnessAsync(short newBrightness, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_ILedLight_changeBrightness> begin_changeBrightness(short newBrightness, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_changeBrightness(short newBrightness, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_changeBrightness(short newBrightness, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_changeBrightness(global::Ice.AsyncResult asyncResult);

        bool toggleLight(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> toggleLightAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_ILedLight_toggleLight> begin_toggleLight(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_toggleLight(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_toggleLight(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_toggleLight(global::Ice.AsyncResult asyncResult);

        bool changeLightMode(LightMode newLightMode, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> changeLightModeAsync(LightMode newLightMode, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_ILedLight_changeLightMode> begin_changeLightMode(LightMode newLightMode, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_changeLightMode(LightMode newLightMode, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_changeLightMode(LightMode newLightMode, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_changeLightMode(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface IRgbwLightPrx : ILedLightPrx
    {
        bool changeColor(short R, short G, short B, short W, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> changeColorAsync(short R, short G, short B, short W, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_IRgbwLight_changeColor> begin_changeColor(short R, short G, short B, short W, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_changeColor(short R, short G, short B, short W, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_changeColor(short R, short G, short B, short W, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_changeColor(global::Ice.AsyncResult asyncResult);
    }
}

namespace smartHome
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface ISmartHomeDeviceOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        string getDeviceInfo(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface INetworkMonitorOperations_ : ISmartHomeDeviceOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        NetworkStatus changeNetworkStatus(NetworkStatus newNetworkStatus, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        bool registerNewIpv6Device(Ipv6Address device, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        bool registerNewIpv4Device(IpAddress device, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        bool removeIpv6Device(Ipv6Address device, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        bool removeIpv4Device(IpAddress device, global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface INatNetworkMonitorOperations_ : INetworkMonitorOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        bool registerNewIpTranslation(IpAddress inside, IpAddress outside, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        bool removeIpTranslation(IpAddress inside, global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface ILedLightOperations_ : ISmartHomeDeviceOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        bool changeBrightness(short newBrightness, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        bool toggleLight(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        bool changeLightMode(LightMode newLightMode, global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface IRgbwLightOperations_ : ILedLightOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        bool changeColor(short R, short G, short B, short W, global::Ice.Current current = null);
    }
}

namespace smartHome
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    [global::System.Serializable]
    public sealed class ISmartHomeDevicePrxHelper : global::Ice.ObjectPrxHelperBase, ISmartHomeDevicePrx
    {
        public ISmartHomeDevicePrxHelper()
        {
        }

        public ISmartHomeDevicePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public string getDeviceInfo(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getDeviceInfoAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<string> getDeviceInfoAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getDeviceInfoAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_getDeviceInfoAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getDeviceInfo_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_getDeviceInfo(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getDeviceInfo_name = "getDeviceInfo";

        private void _iceI_getDeviceInfo(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _getDeviceInfo_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_ISmartHomeDevice_getDeviceInfo> begin_getDeviceInfo(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getDeviceInfo(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getDeviceInfo(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getDeviceInfo(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getDeviceInfo(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getDeviceInfo(context, callback, cookie, false);
        }

        public string end_getDeviceInfo(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDeviceInfo_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ISmartHomeDevice_getDeviceInfo> begin_getDeviceInfo(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getDeviceInfo_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ISmartHomeDevice_getDeviceInfo, string>(
                (Callback_ISmartHomeDevice_getDeviceInfo cb, string ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getDeviceInfo_name, cookie, completedCallback);
            _iceI_getDeviceInfo(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static ISmartHomeDevicePrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ISmartHomeDevicePrx r = b as ISmartHomeDevicePrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                ISmartHomeDevicePrxHelper h = new ISmartHomeDevicePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ISmartHomeDevicePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ISmartHomeDevicePrx r = b as ISmartHomeDevicePrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                ISmartHomeDevicePrxHelper h = new ISmartHomeDevicePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ISmartHomeDevicePrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    ISmartHomeDevicePrxHelper h = new ISmartHomeDevicePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ISmartHomeDevicePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    ISmartHomeDevicePrxHelper h = new ISmartHomeDevicePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ISmartHomeDevicePrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ISmartHomeDevicePrx r = b as ISmartHomeDevicePrx;
            if(r == null)
            {
                ISmartHomeDevicePrxHelper h = new ISmartHomeDevicePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ISmartHomeDevicePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            ISmartHomeDevicePrxHelper h = new ISmartHomeDevicePrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::smartHome::ISmartHomeDevice"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, ISmartHomeDevicePrx v)
        {
            ostr.writeProxy(v);
        }

        public static ISmartHomeDevicePrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                ISmartHomeDevicePrxHelper result = new ISmartHomeDevicePrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public sealed class NatTableHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<IpAddress, IpAddress> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<IpAddress, IpAddress> e in v)
                {
                    IpAddress.ice_write(ostr, e.Key);
                    IpAddress.ice_write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<IpAddress, IpAddress> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<IpAddress, IpAddress> r = new global::System.Collections.Generic.Dictionary<IpAddress, IpAddress>();
            for(int i = 0; i < sz; ++i)
            {
                IpAddress k;
                k = null;
                k = IpAddress.ice_read(istr);
                IpAddress v;
                v = null;
                v = IpAddress.ice_read(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public sealed class IpAddressesHelper
    {
        public static void write(global::Ice.OutputStream ostr, IpAddress[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    (v[ix] == null ? new IpAddress() : v[ix]).ice_writeMembers(ostr);
                }
            }
        }

        public static IpAddress[] read(global::Ice.InputStream istr)
        {
            IpAddress[] v;
            {
                int szx = istr.readAndCheckSeqSize(2);
                v = new IpAddress[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new IpAddress();
                    v[ix].ice_readMembers(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public sealed class Ipv6AddressesHelper
    {
        public static void write(global::Ice.OutputStream ostr, Ipv6Address[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    (v[ix] == null ? new Ipv6Address() : v[ix]).ice_writeMembers(ostr);
                }
            }
        }

        public static Ipv6Address[] read(global::Ice.InputStream istr)
        {
            Ipv6Address[] v;
            {
                int szx = istr.readAndCheckSeqSize(3);
                v = new Ipv6Address[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new Ipv6Address();
                    v[ix].ice_readMembers(istr);
                }
            }
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    [global::System.Serializable]
    public sealed class INetworkMonitorPrxHelper : global::Ice.ObjectPrxHelperBase, INetworkMonitorPrx
    {
        public INetworkMonitorPrxHelper()
        {
        }

        public INetworkMonitorPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public string getDeviceInfo(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getDeviceInfoAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public NetworkStatus changeNetworkStatus(NetworkStatus newNetworkStatus, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_changeNetworkStatusAsync(newNetworkStatus, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool registerNewIpv6Device(Ipv6Address device, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_registerNewIpv6DeviceAsync(device, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool registerNewIpv4Device(IpAddress device, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_registerNewIpv4DeviceAsync(device, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool removeIpv6Device(Ipv6Address device, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_removeIpv6DeviceAsync(device, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool removeIpv4Device(IpAddress device, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_removeIpv4DeviceAsync(device, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<string> getDeviceInfoAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getDeviceInfoAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_getDeviceInfoAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getDeviceInfo_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_getDeviceInfo(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getDeviceInfo_name = "getDeviceInfo";

        private void _iceI_getDeviceInfo(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _getDeviceInfo_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<NetworkStatus> changeNetworkStatusAsync(NetworkStatus newNetworkStatus, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_changeNetworkStatusAsync(newNetworkStatus, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<NetworkStatus> _iceI_changeNetworkStatusAsync(NetworkStatus iceP_newNetworkStatus, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_changeNetworkStatus_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<NetworkStatus>(progress, cancel);
            _iceI_changeNetworkStatus(iceP_newNetworkStatus, context, synchronous, completed);
            return completed.Task;
        }

        private const string _changeNetworkStatus_name = "changeNetworkStatus";

        private void _iceI_changeNetworkStatus(NetworkStatus iceP_newNetworkStatus, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<NetworkStatus>(completed);
            outAsync.invoke(
                _changeNetworkStatus_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_newNetworkStatus, 2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    NetworkStatus ret;
                    ret = (NetworkStatus)istr.readEnum(2);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> registerNewIpv6DeviceAsync(Ipv6Address device, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_registerNewIpv6DeviceAsync(device, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_registerNewIpv6DeviceAsync(Ipv6Address iceP_device, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_registerNewIpv6Device_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_registerNewIpv6Device(iceP_device, context, synchronous, completed);
            return completed.Task;
        }

        private const string _registerNewIpv6Device_name = "registerNewIpv6Device";

        private void _iceI_registerNewIpv6Device(Ipv6Address iceP_device, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _registerNewIpv6Device_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    Ipv6Address.ice_write(ostr, iceP_device);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(OperationNotSupportedException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> registerNewIpv4DeviceAsync(IpAddress device, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_registerNewIpv4DeviceAsync(device, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_registerNewIpv4DeviceAsync(IpAddress iceP_device, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_registerNewIpv4Device_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_registerNewIpv4Device(iceP_device, context, synchronous, completed);
            return completed.Task;
        }

        private const string _registerNewIpv4Device_name = "registerNewIpv4Device";

        private void _iceI_registerNewIpv4Device(IpAddress iceP_device, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _registerNewIpv4Device_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    IpAddress.ice_write(ostr, iceP_device);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(OperationNotSupportedException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> removeIpv6DeviceAsync(Ipv6Address device, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_removeIpv6DeviceAsync(device, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_removeIpv6DeviceAsync(Ipv6Address iceP_device, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_removeIpv6Device_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_removeIpv6Device(iceP_device, context, synchronous, completed);
            return completed.Task;
        }

        private const string _removeIpv6Device_name = "removeIpv6Device";

        private void _iceI_removeIpv6Device(Ipv6Address iceP_device, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _removeIpv6Device_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    Ipv6Address.ice_write(ostr, iceP_device);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(DeviceNotExistsException)
                    {
                        throw;
                    }
                    catch(OperationNotSupportedException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> removeIpv4DeviceAsync(IpAddress device, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_removeIpv4DeviceAsync(device, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_removeIpv4DeviceAsync(IpAddress iceP_device, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_removeIpv4Device_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_removeIpv4Device(iceP_device, context, synchronous, completed);
            return completed.Task;
        }

        private const string _removeIpv4Device_name = "removeIpv4Device";

        private void _iceI_removeIpv4Device(IpAddress iceP_device, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _removeIpv4Device_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    IpAddress.ice_write(ostr, iceP_device);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(DeviceNotExistsException)
                    {
                        throw;
                    }
                    catch(OperationNotSupportedException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_ISmartHomeDevice_getDeviceInfo> begin_getDeviceInfo(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getDeviceInfo(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getDeviceInfo(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getDeviceInfo(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getDeviceInfo(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getDeviceInfo(context, callback, cookie, false);
        }

        public string end_getDeviceInfo(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDeviceInfo_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ISmartHomeDevice_getDeviceInfo> begin_getDeviceInfo(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getDeviceInfo_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ISmartHomeDevice_getDeviceInfo, string>(
                (Callback_ISmartHomeDevice_getDeviceInfo cb, string ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getDeviceInfo_name, cookie, completedCallback);
            _iceI_getDeviceInfo(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_INetworkMonitor_changeNetworkStatus> begin_changeNetworkStatus(NetworkStatus newNetworkStatus, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_changeNetworkStatus(newNetworkStatus, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_changeNetworkStatus(NetworkStatus newNetworkStatus, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_changeNetworkStatus(newNetworkStatus, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_changeNetworkStatus(NetworkStatus newNetworkStatus, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_changeNetworkStatus(newNetworkStatus, context, callback, cookie, false);
        }

        public NetworkStatus end_changeNetworkStatus(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _changeNetworkStatus_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<NetworkStatus>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_INetworkMonitor_changeNetworkStatus> begin_changeNetworkStatus(NetworkStatus iceP_newNetworkStatus, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_changeNetworkStatus_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_INetworkMonitor_changeNetworkStatus, NetworkStatus>(
                (Callback_INetworkMonitor_changeNetworkStatus cb, NetworkStatus ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _changeNetworkStatus_name, cookie, completedCallback);
            _iceI_changeNetworkStatus(iceP_newNetworkStatus, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_INetworkMonitor_registerNewIpv6Device> begin_registerNewIpv6Device(Ipv6Address device, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_registerNewIpv6Device(device, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_registerNewIpv6Device(Ipv6Address device, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_registerNewIpv6Device(device, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_registerNewIpv6Device(Ipv6Address device, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_registerNewIpv6Device(device, context, callback, cookie, false);
        }

        public bool end_registerNewIpv6Device(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _registerNewIpv6Device_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_INetworkMonitor_registerNewIpv6Device> begin_registerNewIpv6Device(Ipv6Address iceP_device, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_registerNewIpv6Device_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_INetworkMonitor_registerNewIpv6Device, bool>(
                (Callback_INetworkMonitor_registerNewIpv6Device cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _registerNewIpv6Device_name, cookie, completedCallback);
            _iceI_registerNewIpv6Device(iceP_device, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_INetworkMonitor_registerNewIpv4Device> begin_registerNewIpv4Device(IpAddress device, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_registerNewIpv4Device(device, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_registerNewIpv4Device(IpAddress device, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_registerNewIpv4Device(device, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_registerNewIpv4Device(IpAddress device, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_registerNewIpv4Device(device, context, callback, cookie, false);
        }

        public bool end_registerNewIpv4Device(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _registerNewIpv4Device_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_INetworkMonitor_registerNewIpv4Device> begin_registerNewIpv4Device(IpAddress iceP_device, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_registerNewIpv4Device_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_INetworkMonitor_registerNewIpv4Device, bool>(
                (Callback_INetworkMonitor_registerNewIpv4Device cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _registerNewIpv4Device_name, cookie, completedCallback);
            _iceI_registerNewIpv4Device(iceP_device, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_INetworkMonitor_removeIpv6Device> begin_removeIpv6Device(Ipv6Address device, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_removeIpv6Device(device, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_removeIpv6Device(Ipv6Address device, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_removeIpv6Device(device, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_removeIpv6Device(Ipv6Address device, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_removeIpv6Device(device, context, callback, cookie, false);
        }

        public bool end_removeIpv6Device(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _removeIpv6Device_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_INetworkMonitor_removeIpv6Device> begin_removeIpv6Device(Ipv6Address iceP_device, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_removeIpv6Device_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_INetworkMonitor_removeIpv6Device, bool>(
                (Callback_INetworkMonitor_removeIpv6Device cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _removeIpv6Device_name, cookie, completedCallback);
            _iceI_removeIpv6Device(iceP_device, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_INetworkMonitor_removeIpv4Device> begin_removeIpv4Device(IpAddress device, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_removeIpv4Device(device, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_removeIpv4Device(IpAddress device, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_removeIpv4Device(device, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_removeIpv4Device(IpAddress device, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_removeIpv4Device(device, context, callback, cookie, false);
        }

        public bool end_removeIpv4Device(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _removeIpv4Device_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_INetworkMonitor_removeIpv4Device> begin_removeIpv4Device(IpAddress iceP_device, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_removeIpv4Device_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_INetworkMonitor_removeIpv4Device, bool>(
                (Callback_INetworkMonitor_removeIpv4Device cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _removeIpv4Device_name, cookie, completedCallback);
            _iceI_removeIpv4Device(iceP_device, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static INetworkMonitorPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            INetworkMonitorPrx r = b as INetworkMonitorPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                INetworkMonitorPrxHelper h = new INetworkMonitorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static INetworkMonitorPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            INetworkMonitorPrx r = b as INetworkMonitorPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                INetworkMonitorPrxHelper h = new INetworkMonitorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static INetworkMonitorPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    INetworkMonitorPrxHelper h = new INetworkMonitorPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static INetworkMonitorPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    INetworkMonitorPrxHelper h = new INetworkMonitorPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static INetworkMonitorPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            INetworkMonitorPrx r = b as INetworkMonitorPrx;
            if(r == null)
            {
                INetworkMonitorPrxHelper h = new INetworkMonitorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static INetworkMonitorPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            INetworkMonitorPrxHelper h = new INetworkMonitorPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::smartHome::INetworkMonitor",
            "::smartHome::ISmartHomeDevice"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, INetworkMonitorPrx v)
        {
            ostr.writeProxy(v);
        }

        public static INetworkMonitorPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                INetworkMonitorPrxHelper result = new INetworkMonitorPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    [global::System.Serializable]
    public sealed class INatNetworkMonitorPrxHelper : global::Ice.ObjectPrxHelperBase, INatNetworkMonitorPrx
    {
        public INatNetworkMonitorPrxHelper()
        {
        }

        public INatNetworkMonitorPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public string getDeviceInfo(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getDeviceInfoAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public NetworkStatus changeNetworkStatus(NetworkStatus newNetworkStatus, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_changeNetworkStatusAsync(newNetworkStatus, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool registerNewIpv6Device(Ipv6Address device, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_registerNewIpv6DeviceAsync(device, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool registerNewIpv4Device(IpAddress device, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_registerNewIpv4DeviceAsync(device, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool removeIpv6Device(Ipv6Address device, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_removeIpv6DeviceAsync(device, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool removeIpv4Device(IpAddress device, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_removeIpv4DeviceAsync(device, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool registerNewIpTranslation(IpAddress inside, IpAddress outside, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_registerNewIpTranslationAsync(inside, outside, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool removeIpTranslation(IpAddress inside, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_removeIpTranslationAsync(inside, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<string> getDeviceInfoAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getDeviceInfoAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_getDeviceInfoAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getDeviceInfo_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_getDeviceInfo(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getDeviceInfo_name = "getDeviceInfo";

        private void _iceI_getDeviceInfo(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _getDeviceInfo_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<NetworkStatus> changeNetworkStatusAsync(NetworkStatus newNetworkStatus, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_changeNetworkStatusAsync(newNetworkStatus, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<NetworkStatus> _iceI_changeNetworkStatusAsync(NetworkStatus iceP_newNetworkStatus, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_changeNetworkStatus_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<NetworkStatus>(progress, cancel);
            _iceI_changeNetworkStatus(iceP_newNetworkStatus, context, synchronous, completed);
            return completed.Task;
        }

        private const string _changeNetworkStatus_name = "changeNetworkStatus";

        private void _iceI_changeNetworkStatus(NetworkStatus iceP_newNetworkStatus, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<NetworkStatus>(completed);
            outAsync.invoke(
                _changeNetworkStatus_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_newNetworkStatus, 2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    NetworkStatus ret;
                    ret = (NetworkStatus)istr.readEnum(2);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> registerNewIpv6DeviceAsync(Ipv6Address device, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_registerNewIpv6DeviceAsync(device, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_registerNewIpv6DeviceAsync(Ipv6Address iceP_device, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_registerNewIpv6Device_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_registerNewIpv6Device(iceP_device, context, synchronous, completed);
            return completed.Task;
        }

        private const string _registerNewIpv6Device_name = "registerNewIpv6Device";

        private void _iceI_registerNewIpv6Device(Ipv6Address iceP_device, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _registerNewIpv6Device_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    Ipv6Address.ice_write(ostr, iceP_device);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(OperationNotSupportedException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> registerNewIpv4DeviceAsync(IpAddress device, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_registerNewIpv4DeviceAsync(device, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_registerNewIpv4DeviceAsync(IpAddress iceP_device, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_registerNewIpv4Device_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_registerNewIpv4Device(iceP_device, context, synchronous, completed);
            return completed.Task;
        }

        private const string _registerNewIpv4Device_name = "registerNewIpv4Device";

        private void _iceI_registerNewIpv4Device(IpAddress iceP_device, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _registerNewIpv4Device_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    IpAddress.ice_write(ostr, iceP_device);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(OperationNotSupportedException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> removeIpv6DeviceAsync(Ipv6Address device, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_removeIpv6DeviceAsync(device, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_removeIpv6DeviceAsync(Ipv6Address iceP_device, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_removeIpv6Device_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_removeIpv6Device(iceP_device, context, synchronous, completed);
            return completed.Task;
        }

        private const string _removeIpv6Device_name = "removeIpv6Device";

        private void _iceI_removeIpv6Device(Ipv6Address iceP_device, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _removeIpv6Device_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    Ipv6Address.ice_write(ostr, iceP_device);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(DeviceNotExistsException)
                    {
                        throw;
                    }
                    catch(OperationNotSupportedException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> removeIpv4DeviceAsync(IpAddress device, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_removeIpv4DeviceAsync(device, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_removeIpv4DeviceAsync(IpAddress iceP_device, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_removeIpv4Device_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_removeIpv4Device(iceP_device, context, synchronous, completed);
            return completed.Task;
        }

        private const string _removeIpv4Device_name = "removeIpv4Device";

        private void _iceI_removeIpv4Device(IpAddress iceP_device, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _removeIpv4Device_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    IpAddress.ice_write(ostr, iceP_device);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(DeviceNotExistsException)
                    {
                        throw;
                    }
                    catch(OperationNotSupportedException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> registerNewIpTranslationAsync(IpAddress inside, IpAddress outside, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_registerNewIpTranslationAsync(inside, outside, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_registerNewIpTranslationAsync(IpAddress iceP_inside, IpAddress iceP_outside, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_registerNewIpTranslation_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_registerNewIpTranslation(iceP_inside, iceP_outside, context, synchronous, completed);
            return completed.Task;
        }

        private const string _registerNewIpTranslation_name = "registerNewIpTranslation";

        private void _iceI_registerNewIpTranslation(IpAddress iceP_inside, IpAddress iceP_outside, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _registerNewIpTranslation_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    IpAddress.ice_write(ostr, iceP_inside);
                    IpAddress.ice_write(ostr, iceP_outside);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(OperationNotSupportedException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> removeIpTranslationAsync(IpAddress inside, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_removeIpTranslationAsync(inside, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_removeIpTranslationAsync(IpAddress iceP_inside, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_removeIpTranslation_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_removeIpTranslation(iceP_inside, context, synchronous, completed);
            return completed.Task;
        }

        private const string _removeIpTranslation_name = "removeIpTranslation";

        private void _iceI_removeIpTranslation(IpAddress iceP_inside, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _removeIpTranslation_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    IpAddress.ice_write(ostr, iceP_inside);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(DeviceNotExistsException)
                    {
                        throw;
                    }
                    catch(OperationNotSupportedException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_ISmartHomeDevice_getDeviceInfo> begin_getDeviceInfo(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getDeviceInfo(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getDeviceInfo(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getDeviceInfo(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getDeviceInfo(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getDeviceInfo(context, callback, cookie, false);
        }

        public string end_getDeviceInfo(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDeviceInfo_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ISmartHomeDevice_getDeviceInfo> begin_getDeviceInfo(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getDeviceInfo_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ISmartHomeDevice_getDeviceInfo, string>(
                (Callback_ISmartHomeDevice_getDeviceInfo cb, string ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getDeviceInfo_name, cookie, completedCallback);
            _iceI_getDeviceInfo(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_INetworkMonitor_changeNetworkStatus> begin_changeNetworkStatus(NetworkStatus newNetworkStatus, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_changeNetworkStatus(newNetworkStatus, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_changeNetworkStatus(NetworkStatus newNetworkStatus, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_changeNetworkStatus(newNetworkStatus, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_changeNetworkStatus(NetworkStatus newNetworkStatus, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_changeNetworkStatus(newNetworkStatus, context, callback, cookie, false);
        }

        public NetworkStatus end_changeNetworkStatus(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _changeNetworkStatus_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<NetworkStatus>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_INetworkMonitor_changeNetworkStatus> begin_changeNetworkStatus(NetworkStatus iceP_newNetworkStatus, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_changeNetworkStatus_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_INetworkMonitor_changeNetworkStatus, NetworkStatus>(
                (Callback_INetworkMonitor_changeNetworkStatus cb, NetworkStatus ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _changeNetworkStatus_name, cookie, completedCallback);
            _iceI_changeNetworkStatus(iceP_newNetworkStatus, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_INetworkMonitor_registerNewIpv6Device> begin_registerNewIpv6Device(Ipv6Address device, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_registerNewIpv6Device(device, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_registerNewIpv6Device(Ipv6Address device, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_registerNewIpv6Device(device, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_registerNewIpv6Device(Ipv6Address device, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_registerNewIpv6Device(device, context, callback, cookie, false);
        }

        public bool end_registerNewIpv6Device(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _registerNewIpv6Device_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_INetworkMonitor_registerNewIpv6Device> begin_registerNewIpv6Device(Ipv6Address iceP_device, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_registerNewIpv6Device_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_INetworkMonitor_registerNewIpv6Device, bool>(
                (Callback_INetworkMonitor_registerNewIpv6Device cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _registerNewIpv6Device_name, cookie, completedCallback);
            _iceI_registerNewIpv6Device(iceP_device, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_INetworkMonitor_registerNewIpv4Device> begin_registerNewIpv4Device(IpAddress device, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_registerNewIpv4Device(device, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_registerNewIpv4Device(IpAddress device, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_registerNewIpv4Device(device, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_registerNewIpv4Device(IpAddress device, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_registerNewIpv4Device(device, context, callback, cookie, false);
        }

        public bool end_registerNewIpv4Device(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _registerNewIpv4Device_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_INetworkMonitor_registerNewIpv4Device> begin_registerNewIpv4Device(IpAddress iceP_device, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_registerNewIpv4Device_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_INetworkMonitor_registerNewIpv4Device, bool>(
                (Callback_INetworkMonitor_registerNewIpv4Device cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _registerNewIpv4Device_name, cookie, completedCallback);
            _iceI_registerNewIpv4Device(iceP_device, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_INetworkMonitor_removeIpv6Device> begin_removeIpv6Device(Ipv6Address device, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_removeIpv6Device(device, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_removeIpv6Device(Ipv6Address device, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_removeIpv6Device(device, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_removeIpv6Device(Ipv6Address device, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_removeIpv6Device(device, context, callback, cookie, false);
        }

        public bool end_removeIpv6Device(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _removeIpv6Device_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_INetworkMonitor_removeIpv6Device> begin_removeIpv6Device(Ipv6Address iceP_device, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_removeIpv6Device_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_INetworkMonitor_removeIpv6Device, bool>(
                (Callback_INetworkMonitor_removeIpv6Device cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _removeIpv6Device_name, cookie, completedCallback);
            _iceI_removeIpv6Device(iceP_device, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_INetworkMonitor_removeIpv4Device> begin_removeIpv4Device(IpAddress device, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_removeIpv4Device(device, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_removeIpv4Device(IpAddress device, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_removeIpv4Device(device, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_removeIpv4Device(IpAddress device, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_removeIpv4Device(device, context, callback, cookie, false);
        }

        public bool end_removeIpv4Device(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _removeIpv4Device_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_INetworkMonitor_removeIpv4Device> begin_removeIpv4Device(IpAddress iceP_device, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_removeIpv4Device_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_INetworkMonitor_removeIpv4Device, bool>(
                (Callback_INetworkMonitor_removeIpv4Device cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _removeIpv4Device_name, cookie, completedCallback);
            _iceI_removeIpv4Device(iceP_device, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_INatNetworkMonitor_registerNewIpTranslation> begin_registerNewIpTranslation(IpAddress inside, IpAddress outside, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_registerNewIpTranslation(inside, outside, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_registerNewIpTranslation(IpAddress inside, IpAddress outside, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_registerNewIpTranslation(inside, outside, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_registerNewIpTranslation(IpAddress inside, IpAddress outside, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_registerNewIpTranslation(inside, outside, context, callback, cookie, false);
        }

        public bool end_registerNewIpTranslation(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _registerNewIpTranslation_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_INatNetworkMonitor_registerNewIpTranslation> begin_registerNewIpTranslation(IpAddress iceP_inside, IpAddress iceP_outside, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_registerNewIpTranslation_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_INatNetworkMonitor_registerNewIpTranslation, bool>(
                (Callback_INatNetworkMonitor_registerNewIpTranslation cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _registerNewIpTranslation_name, cookie, completedCallback);
            _iceI_registerNewIpTranslation(iceP_inside, iceP_outside, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_INatNetworkMonitor_removeIpTranslation> begin_removeIpTranslation(IpAddress inside, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_removeIpTranslation(inside, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_removeIpTranslation(IpAddress inside, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_removeIpTranslation(inside, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_removeIpTranslation(IpAddress inside, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_removeIpTranslation(inside, context, callback, cookie, false);
        }

        public bool end_removeIpTranslation(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _removeIpTranslation_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_INatNetworkMonitor_removeIpTranslation> begin_removeIpTranslation(IpAddress iceP_inside, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_removeIpTranslation_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_INatNetworkMonitor_removeIpTranslation, bool>(
                (Callback_INatNetworkMonitor_removeIpTranslation cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _removeIpTranslation_name, cookie, completedCallback);
            _iceI_removeIpTranslation(iceP_inside, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static INatNetworkMonitorPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            INatNetworkMonitorPrx r = b as INatNetworkMonitorPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                INatNetworkMonitorPrxHelper h = new INatNetworkMonitorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static INatNetworkMonitorPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            INatNetworkMonitorPrx r = b as INatNetworkMonitorPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                INatNetworkMonitorPrxHelper h = new INatNetworkMonitorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static INatNetworkMonitorPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    INatNetworkMonitorPrxHelper h = new INatNetworkMonitorPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static INatNetworkMonitorPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    INatNetworkMonitorPrxHelper h = new INatNetworkMonitorPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static INatNetworkMonitorPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            INatNetworkMonitorPrx r = b as INatNetworkMonitorPrx;
            if(r == null)
            {
                INatNetworkMonitorPrxHelper h = new INatNetworkMonitorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static INatNetworkMonitorPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            INatNetworkMonitorPrxHelper h = new INatNetworkMonitorPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::smartHome::INatNetworkMonitor",
            "::smartHome::INetworkMonitor",
            "::smartHome::ISmartHomeDevice"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, INatNetworkMonitorPrx v)
        {
            ostr.writeProxy(v);
        }

        public static INatNetworkMonitorPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                INatNetworkMonitorPrxHelper result = new INatNetworkMonitorPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public sealed class RgbwPalletHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<Color, short> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<Color, short> e in v)
                {
                    ostr.writeEnum((int)e.Key, 3);
                    ostr.writeShort(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<Color, short> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<Color, short> r = new global::System.Collections.Generic.Dictionary<Color, short>();
            for(int i = 0; i < sz; ++i)
            {
                Color k;
                k = (Color)istr.readEnum(3);
                short v;
                v = istr.readShort();
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    [global::System.Serializable]
    public sealed class ILedLightPrxHelper : global::Ice.ObjectPrxHelperBase, ILedLightPrx
    {
        public ILedLightPrxHelper()
        {
        }

        public ILedLightPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public string getDeviceInfo(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getDeviceInfoAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool changeBrightness(short newBrightness, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_changeBrightnessAsync(newBrightness, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool toggleLight(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_toggleLightAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool changeLightMode(LightMode newLightMode, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_changeLightModeAsync(newLightMode, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<string> getDeviceInfoAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getDeviceInfoAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_getDeviceInfoAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getDeviceInfo_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_getDeviceInfo(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getDeviceInfo_name = "getDeviceInfo";

        private void _iceI_getDeviceInfo(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _getDeviceInfo_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> changeBrightnessAsync(short newBrightness, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_changeBrightnessAsync(newBrightness, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_changeBrightnessAsync(short iceP_newBrightness, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_changeBrightness_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_changeBrightness(iceP_newBrightness, context, synchronous, completed);
            return completed.Task;
        }

        private const string _changeBrightness_name = "changeBrightness";

        private void _iceI_changeBrightness(short iceP_newBrightness, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _changeBrightness_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeShort(iceP_newBrightness);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(IndexOutOfRangeException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> toggleLightAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_toggleLightAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_toggleLightAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_toggleLight_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_toggleLight(context, synchronous, completed);
            return completed.Task;
        }

        private const string _toggleLight_name = "toggleLight";

        private void _iceI_toggleLight(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _toggleLight_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> changeLightModeAsync(LightMode newLightMode, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_changeLightModeAsync(newLightMode, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_changeLightModeAsync(LightMode iceP_newLightMode, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_changeLightMode_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_changeLightMode(iceP_newLightMode, context, synchronous, completed);
            return completed.Task;
        }

        private const string _changeLightMode_name = "changeLightMode";

        private void _iceI_changeLightMode(LightMode iceP_newLightMode, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _changeLightMode_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_newLightMode, 3);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_ISmartHomeDevice_getDeviceInfo> begin_getDeviceInfo(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getDeviceInfo(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getDeviceInfo(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getDeviceInfo(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getDeviceInfo(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getDeviceInfo(context, callback, cookie, false);
        }

        public string end_getDeviceInfo(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDeviceInfo_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ISmartHomeDevice_getDeviceInfo> begin_getDeviceInfo(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getDeviceInfo_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ISmartHomeDevice_getDeviceInfo, string>(
                (Callback_ISmartHomeDevice_getDeviceInfo cb, string ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getDeviceInfo_name, cookie, completedCallback);
            _iceI_getDeviceInfo(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_ILedLight_changeBrightness> begin_changeBrightness(short newBrightness, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_changeBrightness(newBrightness, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_changeBrightness(short newBrightness, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_changeBrightness(newBrightness, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_changeBrightness(short newBrightness, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_changeBrightness(newBrightness, context, callback, cookie, false);
        }

        public bool end_changeBrightness(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _changeBrightness_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ILedLight_changeBrightness> begin_changeBrightness(short iceP_newBrightness, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_changeBrightness_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ILedLight_changeBrightness, bool>(
                (Callback_ILedLight_changeBrightness cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _changeBrightness_name, cookie, completedCallback);
            _iceI_changeBrightness(iceP_newBrightness, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_ILedLight_toggleLight> begin_toggleLight(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_toggleLight(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_toggleLight(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_toggleLight(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_toggleLight(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_toggleLight(context, callback, cookie, false);
        }

        public bool end_toggleLight(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _toggleLight_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ILedLight_toggleLight> begin_toggleLight(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_toggleLight_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ILedLight_toggleLight, bool>(
                (Callback_ILedLight_toggleLight cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _toggleLight_name, cookie, completedCallback);
            _iceI_toggleLight(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_ILedLight_changeLightMode> begin_changeLightMode(LightMode newLightMode, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_changeLightMode(newLightMode, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_changeLightMode(LightMode newLightMode, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_changeLightMode(newLightMode, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_changeLightMode(LightMode newLightMode, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_changeLightMode(newLightMode, context, callback, cookie, false);
        }

        public bool end_changeLightMode(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _changeLightMode_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ILedLight_changeLightMode> begin_changeLightMode(LightMode iceP_newLightMode, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_changeLightMode_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ILedLight_changeLightMode, bool>(
                (Callback_ILedLight_changeLightMode cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _changeLightMode_name, cookie, completedCallback);
            _iceI_changeLightMode(iceP_newLightMode, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static ILedLightPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ILedLightPrx r = b as ILedLightPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                ILedLightPrxHelper h = new ILedLightPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ILedLightPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ILedLightPrx r = b as ILedLightPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                ILedLightPrxHelper h = new ILedLightPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ILedLightPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    ILedLightPrxHelper h = new ILedLightPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ILedLightPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    ILedLightPrxHelper h = new ILedLightPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ILedLightPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ILedLightPrx r = b as ILedLightPrx;
            if(r == null)
            {
                ILedLightPrxHelper h = new ILedLightPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ILedLightPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            ILedLightPrxHelper h = new ILedLightPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::smartHome::ILedLight",
            "::smartHome::ISmartHomeDevice"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, ILedLightPrx v)
        {
            ostr.writeProxy(v);
        }

        public static ILedLightPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                ILedLightPrxHelper result = new ILedLightPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    [global::System.Serializable]
    public sealed class IRgbwLightPrxHelper : global::Ice.ObjectPrxHelperBase, IRgbwLightPrx
    {
        public IRgbwLightPrxHelper()
        {
        }

        public IRgbwLightPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public string getDeviceInfo(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getDeviceInfoAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool changeBrightness(short newBrightness, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_changeBrightnessAsync(newBrightness, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool toggleLight(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_toggleLightAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool changeLightMode(LightMode newLightMode, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_changeLightModeAsync(newLightMode, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool changeColor(short R, short G, short B, short W, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_changeColorAsync(R, G, B, W, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<string> getDeviceInfoAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getDeviceInfoAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_getDeviceInfoAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getDeviceInfo_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_getDeviceInfo(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getDeviceInfo_name = "getDeviceInfo";

        private void _iceI_getDeviceInfo(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _getDeviceInfo_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> changeBrightnessAsync(short newBrightness, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_changeBrightnessAsync(newBrightness, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_changeBrightnessAsync(short iceP_newBrightness, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_changeBrightness_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_changeBrightness(iceP_newBrightness, context, synchronous, completed);
            return completed.Task;
        }

        private const string _changeBrightness_name = "changeBrightness";

        private void _iceI_changeBrightness(short iceP_newBrightness, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _changeBrightness_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeShort(iceP_newBrightness);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(IndexOutOfRangeException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> toggleLightAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_toggleLightAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_toggleLightAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_toggleLight_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_toggleLight(context, synchronous, completed);
            return completed.Task;
        }

        private const string _toggleLight_name = "toggleLight";

        private void _iceI_toggleLight(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _toggleLight_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> changeLightModeAsync(LightMode newLightMode, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_changeLightModeAsync(newLightMode, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_changeLightModeAsync(LightMode iceP_newLightMode, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_changeLightMode_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_changeLightMode(iceP_newLightMode, context, synchronous, completed);
            return completed.Task;
        }

        private const string _changeLightMode_name = "changeLightMode";

        private void _iceI_changeLightMode(LightMode iceP_newLightMode, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _changeLightMode_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_newLightMode, 3);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> changeColorAsync(short R, short G, short B, short W, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_changeColorAsync(R, G, B, W, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_changeColorAsync(short iceP_R, short iceP_G, short iceP_B, short iceP_W, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_changeColor_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_changeColor(iceP_R, iceP_G, iceP_B, iceP_W, context, synchronous, completed);
            return completed.Task;
        }

        private const string _changeColor_name = "changeColor";

        private void _iceI_changeColor(short iceP_R, short iceP_G, short iceP_B, short iceP_W, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _changeColor_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeShort(iceP_R);
                    ostr.writeShort(iceP_G);
                    ostr.writeShort(iceP_B);
                    ostr.writeShort(iceP_W);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_ISmartHomeDevice_getDeviceInfo> begin_getDeviceInfo(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getDeviceInfo(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getDeviceInfo(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getDeviceInfo(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getDeviceInfo(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getDeviceInfo(context, callback, cookie, false);
        }

        public string end_getDeviceInfo(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDeviceInfo_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ISmartHomeDevice_getDeviceInfo> begin_getDeviceInfo(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getDeviceInfo_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ISmartHomeDevice_getDeviceInfo, string>(
                (Callback_ISmartHomeDevice_getDeviceInfo cb, string ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getDeviceInfo_name, cookie, completedCallback);
            _iceI_getDeviceInfo(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_ILedLight_changeBrightness> begin_changeBrightness(short newBrightness, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_changeBrightness(newBrightness, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_changeBrightness(short newBrightness, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_changeBrightness(newBrightness, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_changeBrightness(short newBrightness, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_changeBrightness(newBrightness, context, callback, cookie, false);
        }

        public bool end_changeBrightness(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _changeBrightness_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ILedLight_changeBrightness> begin_changeBrightness(short iceP_newBrightness, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_changeBrightness_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ILedLight_changeBrightness, bool>(
                (Callback_ILedLight_changeBrightness cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _changeBrightness_name, cookie, completedCallback);
            _iceI_changeBrightness(iceP_newBrightness, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_ILedLight_toggleLight> begin_toggleLight(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_toggleLight(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_toggleLight(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_toggleLight(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_toggleLight(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_toggleLight(context, callback, cookie, false);
        }

        public bool end_toggleLight(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _toggleLight_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ILedLight_toggleLight> begin_toggleLight(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_toggleLight_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ILedLight_toggleLight, bool>(
                (Callback_ILedLight_toggleLight cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _toggleLight_name, cookie, completedCallback);
            _iceI_toggleLight(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_ILedLight_changeLightMode> begin_changeLightMode(LightMode newLightMode, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_changeLightMode(newLightMode, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_changeLightMode(LightMode newLightMode, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_changeLightMode(newLightMode, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_changeLightMode(LightMode newLightMode, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_changeLightMode(newLightMode, context, callback, cookie, false);
        }

        public bool end_changeLightMode(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _changeLightMode_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ILedLight_changeLightMode> begin_changeLightMode(LightMode iceP_newLightMode, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_changeLightMode_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ILedLight_changeLightMode, bool>(
                (Callback_ILedLight_changeLightMode cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _changeLightMode_name, cookie, completedCallback);
            _iceI_changeLightMode(iceP_newLightMode, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_IRgbwLight_changeColor> begin_changeColor(short R, short G, short B, short W, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_changeColor(R, G, B, W, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_changeColor(short R, short G, short B, short W, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_changeColor(R, G, B, W, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_changeColor(short R, short G, short B, short W, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_changeColor(R, G, B, W, context, callback, cookie, false);
        }

        public bool end_changeColor(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _changeColor_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_IRgbwLight_changeColor> begin_changeColor(short iceP_R, short iceP_G, short iceP_B, short iceP_W, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_changeColor_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_IRgbwLight_changeColor, bool>(
                (Callback_IRgbwLight_changeColor cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _changeColor_name, cookie, completedCallback);
            _iceI_changeColor(iceP_R, iceP_G, iceP_B, iceP_W, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static IRgbwLightPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            IRgbwLightPrx r = b as IRgbwLightPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                IRgbwLightPrxHelper h = new IRgbwLightPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static IRgbwLightPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            IRgbwLightPrx r = b as IRgbwLightPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                IRgbwLightPrxHelper h = new IRgbwLightPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static IRgbwLightPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    IRgbwLightPrxHelper h = new IRgbwLightPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static IRgbwLightPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    IRgbwLightPrxHelper h = new IRgbwLightPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static IRgbwLightPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            IRgbwLightPrx r = b as IRgbwLightPrx;
            if(r == null)
            {
                IRgbwLightPrxHelper h = new IRgbwLightPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static IRgbwLightPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            IRgbwLightPrxHelper h = new IRgbwLightPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::smartHome::ILedLight",
            "::smartHome::IRgbwLight",
            "::smartHome::ISmartHomeDevice"
        };

        public static string ice_staticId()
        {
            return _ids[2];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, IRgbwLightPrx v)
        {
            ostr.writeProxy(v);
        }

        public static IRgbwLightPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                IRgbwLightPrxHelper result = new IRgbwLightPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace smartHome
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public abstract class ISmartHomeDeviceDisp_ : global::Ice.ObjectImpl, ISmartHomeDevice
    {
        #region Slice operations

        public abstract string getDeviceInfo(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::smartHome::ISmartHomeDevice"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getDeviceInfo(ISmartHomeDevice obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getDeviceInfo(current);
            var ostr = inS.startWriteParams();
            ostr.writeString(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "getDeviceInfo",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_getDeviceInfo(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public abstract class INetworkMonitorDisp_ : global::Ice.ObjectImpl, INetworkMonitor
    {
        #region Slice operations

        public abstract NetworkStatus changeNetworkStatus(NetworkStatus newNetworkStatus, global::Ice.Current current = null);

        public abstract bool registerNewIpv6Device(Ipv6Address device, global::Ice.Current current = null);

        public abstract bool registerNewIpv4Device(IpAddress device, global::Ice.Current current = null);

        public abstract bool removeIpv6Device(Ipv6Address device, global::Ice.Current current = null);

        public abstract bool removeIpv4Device(IpAddress device, global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract string getDeviceInfo(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::smartHome::INetworkMonitor",
            "::smartHome::ISmartHomeDevice"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_changeNetworkStatus(INetworkMonitor obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            NetworkStatus iceP_newNetworkStatus;
            iceP_newNetworkStatus = (NetworkStatus)istr.readEnum(2);
            inS.endReadParams();
            var ret = obj.changeNetworkStatus(iceP_newNetworkStatus, current);
            var ostr = inS.startWriteParams();
            ostr.writeEnum((int)ret, 2);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_registerNewIpv6Device(INetworkMonitor obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Ipv6Address iceP_device;
            iceP_device = null;
            iceP_device = Ipv6Address.ice_read(istr);
            inS.endReadParams();
            var ret = obj.registerNewIpv6Device(iceP_device, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_registerNewIpv4Device(INetworkMonitor obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            IpAddress iceP_device;
            iceP_device = null;
            iceP_device = IpAddress.ice_read(istr);
            inS.endReadParams();
            var ret = obj.registerNewIpv4Device(iceP_device, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_removeIpv6Device(INetworkMonitor obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Ipv6Address iceP_device;
            iceP_device = null;
            iceP_device = Ipv6Address.ice_read(istr);
            inS.endReadParams();
            var ret = obj.removeIpv6Device(iceP_device, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_removeIpv4Device(INetworkMonitor obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            IpAddress iceP_device;
            iceP_device = null;
            iceP_device = IpAddress.ice_read(istr);
            inS.endReadParams();
            var ret = obj.removeIpv4Device(iceP_device, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "changeNetworkStatus",
            "getDeviceInfo",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "registerNewIpv4Device",
            "registerNewIpv6Device",
            "removeIpv4Device",
            "removeIpv6Device"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_changeNetworkStatus(this, inS, current);
                }
                case 1:
                {
                    return ISmartHomeDeviceDisp_.iceD_getDeviceInfo(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 6:
                {
                    return iceD_registerNewIpv4Device(this, inS, current);
                }
                case 7:
                {
                    return iceD_registerNewIpv6Device(this, inS, current);
                }
                case 8:
                {
                    return iceD_removeIpv4Device(this, inS, current);
                }
                case 9:
                {
                    return iceD_removeIpv6Device(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public abstract class INatNetworkMonitorDisp_ : global::Ice.ObjectImpl, INatNetworkMonitor
    {
        #region Slice operations

        public abstract bool registerNewIpTranslation(IpAddress inside, IpAddress outside, global::Ice.Current current = null);

        public abstract bool removeIpTranslation(IpAddress inside, global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract NetworkStatus changeNetworkStatus(NetworkStatus newNetworkStatus, global::Ice.Current current = null);

        public abstract bool registerNewIpv4Device(IpAddress device, global::Ice.Current current = null);

        public abstract bool registerNewIpv6Device(Ipv6Address device, global::Ice.Current current = null);

        public abstract bool removeIpv4Device(IpAddress device, global::Ice.Current current = null);

        public abstract bool removeIpv6Device(Ipv6Address device, global::Ice.Current current = null);

        public abstract string getDeviceInfo(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::smartHome::INatNetworkMonitor",
            "::smartHome::INetworkMonitor",
            "::smartHome::ISmartHomeDevice"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_registerNewIpTranslation(INatNetworkMonitor obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            IpAddress iceP_inside;
            iceP_inside = null;
            IpAddress iceP_outside;
            iceP_outside = null;
            iceP_inside = IpAddress.ice_read(istr);
            iceP_outside = IpAddress.ice_read(istr);
            inS.endReadParams();
            var ret = obj.registerNewIpTranslation(iceP_inside, iceP_outside, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_removeIpTranslation(INatNetworkMonitor obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            IpAddress iceP_inside;
            iceP_inside = null;
            iceP_inside = IpAddress.ice_read(istr);
            inS.endReadParams();
            var ret = obj.removeIpTranslation(iceP_inside, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "changeNetworkStatus",
            "getDeviceInfo",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "registerNewIpTranslation",
            "registerNewIpv4Device",
            "registerNewIpv6Device",
            "removeIpTranslation",
            "removeIpv4Device",
            "removeIpv6Device"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return INetworkMonitorDisp_.iceD_changeNetworkStatus(this, inS, current);
                }
                case 1:
                {
                    return ISmartHomeDeviceDisp_.iceD_getDeviceInfo(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 6:
                {
                    return iceD_registerNewIpTranslation(this, inS, current);
                }
                case 7:
                {
                    return INetworkMonitorDisp_.iceD_registerNewIpv4Device(this, inS, current);
                }
                case 8:
                {
                    return INetworkMonitorDisp_.iceD_registerNewIpv6Device(this, inS, current);
                }
                case 9:
                {
                    return iceD_removeIpTranslation(this, inS, current);
                }
                case 10:
                {
                    return INetworkMonitorDisp_.iceD_removeIpv4Device(this, inS, current);
                }
                case 11:
                {
                    return INetworkMonitorDisp_.iceD_removeIpv6Device(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public abstract class ILedLightDisp_ : global::Ice.ObjectImpl, ILedLight
    {
        #region Slice operations

        public abstract bool changeBrightness(short newBrightness, global::Ice.Current current = null);

        public abstract bool toggleLight(global::Ice.Current current = null);

        public abstract bool changeLightMode(LightMode newLightMode, global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract string getDeviceInfo(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::smartHome::ILedLight",
            "::smartHome::ISmartHomeDevice"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_changeBrightness(ILedLight obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            short iceP_newBrightness;
            iceP_newBrightness = istr.readShort();
            inS.endReadParams();
            var ret = obj.changeBrightness(iceP_newBrightness, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_toggleLight(ILedLight obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.toggleLight(current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_changeLightMode(ILedLight obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            LightMode iceP_newLightMode;
            iceP_newLightMode = (LightMode)istr.readEnum(3);
            inS.endReadParams();
            var ret = obj.changeLightMode(iceP_newLightMode, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "changeBrightness",
            "changeLightMode",
            "getDeviceInfo",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "toggleLight"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_changeBrightness(this, inS, current);
                }
                case 1:
                {
                    return iceD_changeLightMode(this, inS, current);
                }
                case 2:
                {
                    return ISmartHomeDeviceDisp_.iceD_getDeviceInfo(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 7:
                {
                    return iceD_toggleLight(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public abstract class IRgbwLightDisp_ : global::Ice.ObjectImpl, IRgbwLight
    {
        #region Slice operations

        public abstract bool changeColor(short R, short G, short B, short W, global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract bool changeBrightness(short newBrightness, global::Ice.Current current = null);

        public abstract bool changeLightMode(LightMode newLightMode, global::Ice.Current current = null);

        public abstract bool toggleLight(global::Ice.Current current = null);

        public abstract string getDeviceInfo(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::smartHome::ILedLight",
            "::smartHome::IRgbwLight",
            "::smartHome::ISmartHomeDevice"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[2];
        }

        public static new string ice_staticId()
        {
            return _ids[2];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_changeColor(IRgbwLight obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            short iceP_R;
            short iceP_G;
            short iceP_B;
            short iceP_W;
            iceP_R = istr.readShort();
            iceP_G = istr.readShort();
            iceP_B = istr.readShort();
            iceP_W = istr.readShort();
            inS.endReadParams();
            var ret = obj.changeColor(iceP_R, iceP_G, iceP_B, iceP_W, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "changeBrightness",
            "changeColor",
            "changeLightMode",
            "getDeviceInfo",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "toggleLight"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return ILedLightDisp_.iceD_changeBrightness(this, inS, current);
                }
                case 1:
                {
                    return iceD_changeColor(this, inS, current);
                }
                case 2:
                {
                    return ILedLightDisp_.iceD_changeLightMode(this, inS, current);
                }
                case 3:
                {
                    return ISmartHomeDeviceDisp_.iceD_getDeviceInfo(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 8:
                {
                    return ILedLightDisp_.iceD_toggleLight(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
